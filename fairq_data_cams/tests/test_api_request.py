from pytest import raises

from fairq_data_cams.api_request import ApiRequest


def test_new_api():
    request = ApiRequest(date_start="2025-01-01", date_end="2025-01-02")

    assert request.date_start == "2025-01-01"
    assert request.date_end == "2025-01-02"
    assert request.use_new_api
    assert request.api_address() == "cams-europe-air-quality-forecasts"
    assert request.format() == "download.nc"
    assert request.api_request_body() == {
        "date": "2025-01-01/2025-01-02",
        "type": "forecast",
        "variable": ["nitrogen_dioxide", "particulate_matter_10um", "particulate_matter_2.5um"],
        "time": "00:00",
        "leadtime_hour": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
        ],
        "area": [52.7, 13, 52.3, 13.8],
        "format": "netcdf",
        "model": "ensemble",
        "level": "0",
    }


def test_old_api():
    request = ApiRequest(date_start="2015-01-01", date_end="2015-01-02")

    assert request.date_start == "2015-01-01"
    assert request.date_end == "2015-01-02"
    assert not request.use_new_api
    assert request.api_address() == "cams-global-atmospheric-composition-forecasts"
    assert request.format() == "download.netcdf_zip"
    assert request.api_request_body() == {
        "date": "2015-01-01/2015-01-02",
        "type": "forecast",
        "variable": ["nitrogen_dioxide", "particulate_matter_10um", "particulate_matter_2.5um"],
        "time": "00:00",
        "leadtime_hour": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
        ],
        "area": [52.7, 13, 52.3, 13.8],
        "format": "grib",
        "model_level": "60",  # model level must be 60 because the date is before "2019-07-07"
    }


def test_old_api_after_july_7_2019():
    request = ApiRequest(date_start="2019-07-07", date_end="2019-07-08")
    request.use_new_api = False
    assert request.api_request_body()["model_level"] == "137"


def test_not_depending_on_date():
    request_new = ApiRequest(date_start="2025-01-01", date_end="2025-01-02")
    request_old = ApiRequest(date_start="2015-01-01", date_end="2015-01-02")

    # assert request_old.berlin_bbox == request_new.berlin_bbox == [52.7, 13, 52.3, 13.8]
    assert (
        request_old.variables
        == request_new.variables
        == ["nitrogen_dioxide", "particulate_matter_10um", "particulate_matter_2.5um"]
    )


def check_error():
    with raises(ValueError):
        ApiRequest(date_start="2019-03-01", date_end="2019-07-01")
